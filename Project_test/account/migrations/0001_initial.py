# Generated by Django 3.2.2 on 2021-05-31 05:08

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('acc_name', models.CharField(max_length=50)),
                ('acc_id', models.IntegerField(null=True)),
                ('acc_type', models.CharField(choices=[('company', 'company'), ('student', 'student')], default='student', max_length=30)),
                ('state', models.CharField(choices=[('login', 'login'), ('logout', 'logout')], default='logout', max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('administrator_id', models.IntegerField(primary_key=True, serialize=False)),
                ('administrator_name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('company_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyAccount',
            fields=[
                ('Email', models.EmailField(default='123456@qq.com', max_length=30)),
                ('acc_name', models.CharField(max_length=50)),
                ('acc_pwd', models.CharField(max_length=128)),
                ('acc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('account_balance', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('favorites_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=50)),
                ('job_name', models.CharField(max_length=30)),
                ('url', models.CharField(db_column='URL', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='HistoryRecord',
            fields=[
                ('history_id', models.IntegerField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=50)),
                ('job_name', models.CharField(max_length=30)),
                ('url', models.CharField(db_column='URL', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('job_id', models.IntegerField(primary_key=True, serialize=False)),
                ('job_name', models.CharField(max_length=100)),
                ('salary', models.FloatField()),
                ('label', models.CharField(max_length=100)),
                ('class_id', models.IntegerField()),
                ('detail_url', models.CharField(blank=True, db_column='detail_URL', max_length=105, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrdinaryAccount',
            fields=[
                ('Email', models.EmailField(default='123456@qq.com', max_length=30)),
                ('acc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('acc_name', models.CharField(max_length=50)),
                ('acc_pwd', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='RechargeInfo',
            fields=[
                ('recharge_list', models.IntegerField(primary_key=True, serialize=False)),
                ('recharge_amount', models.FloatField()),
                ('recharge_time', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('job_id', models.IntegerField(primary_key=True, serialize=False)),
                ('time', models.IntegerField()),
                ('experiance', models.CharField(blank=True, max_length=30, null=True)),
                ('degree', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ViewInfo',
            fields=[
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.company')),
                ('acc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.companyaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.job')),
                ('acc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.ordinaryaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Recharge',
            fields=[
                ('recharge_list', models.OneToOneField(db_column='recharge_list', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.rechargeinfo')),
                ('acc_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.companyaccount')),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('history', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.historyrecord')),
                ('acc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.ordinaryaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Collect',
            fields=[
                ('favorites', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.favorites')),
                ('url', models.CharField(db_column='URL', max_length=100)),
                ('acc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.ordinaryaccount')),
            ],
        ),
        migrations.CreateModel(
            name='AdjustJobs',
            fields=[
                ('job', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.job')),
                ('acc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.companyaccount')),
            ],
        ),
        migrations.CreateModel(
            name='AdjustInfo',
            fields=[
                ('acc', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='account.account')),
                ('administrator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='account.administrator')),
            ],
        ),
    ]
